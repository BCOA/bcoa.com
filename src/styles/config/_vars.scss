//
// Colors
//

:root {
  // enter colors
  --red: red;
}

//
// Units
//

:root {
  --unit: 4px;
  @for $i from 0 through 50 {
    --unit-#{$i}: calc(var(--unit) * #{$i});
  }
}

//
// breakpoints
//

$bp-1-width: 768px;
$bp-2-width: 1024px;

@mixin bp-1 {
  @media (min-width: #{$bp-1-width}) {
    @content;
  }
}

@mixin bp-2 {
  @media (min-width: #{$bp-2-width}) {
    @content;
  }
}


// Spacing Helpers

@function uncapitalize($string) {
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

$props: 'margin' 'padding';
$propsAdj: "", "Vertical", "Horizontal", "Left", "Bottom", "Right", "Top";

@for $i from 1 through length($props) {
  @for $j from 1 through length($propsAdj) {
    @for $k from 0 through 50 {
      @if nth($propsAdj, $j) == 'Vertical' {
        .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
          #{nth($props, $i)}: var(--unit-#{$k}) 0;
        }
      } @else if nth($propsAdj, $j) == 'Horizontal' {
        .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
          #{nth($props, $i)}: 0 var(--unit-#{$k});
        }
      } @else {
        .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
          #{nth($props, $i)}-#{uncapitalize(nth($propsAdj, $j))}: var(--unit-#{$k});
        }
      }
    }
  }
}
